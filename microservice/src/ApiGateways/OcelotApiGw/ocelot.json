{
  "GlobalConfiguration": {
    "BaseUrl": "http://apigw.ocelot"
  },
  "SwaggerEndPoints": [
    {
      "Key": "gateway",
      "Config": [
        {
          "Name": "Gateway API",
          "Version": "v1",
          "Url": "http://host.docker.internal/swagger/v1/swagger.json"
        }
      ]
    },
    {
      "Key": "product-service",
      "Config": [
        {
          "Name": "Product API",
          "Version": "v1",
          "Url": "http://host.docker.internal/swagger/v1/swagger.json"
        }
      ]
    }
  ],
  "Routes": [
    // CUSTOMER.API ROUTING
    {
      "DownstreamPathTemplate": "/api/customer",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6003
        }
      ],
      "UpstreamPathTemplate": "/customer",
      "UpstreamHttpMethod": [ "GET" ]
    },
    {
      "DownstreamPathTemplate": "/api/customer/{userName}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6003
        }
      ],
      "UpstreamPathTemplate": "/customer/{userName}",
      "UpstreamHttpMethod": [ "GET" ]
    },
    // PRODUCT.API ROUTING
    {
      "DownstreamPathTemplate": "/api/product",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6002
        }
      ],
      "UpstreamPathTemplate": "/product",
      "UpstreamHttpMethod": [ "GET", "POST" ],
      "RateLimitOptions": {
        "ClientWhitelist": [], // client in this array will be affected by the limit
        "EnableRateLimiting": true,
        "Limit": 1, // total request that a client can do in a time
        "Period": "2s", // seconds, minutes, hours, days
        "PeriodTimespan": 1 // retry after a certain number of second
      },
      "QoSOptions": {
        "ExceptionsAllowedBeforeBreaking": 3, // require value >= 2. modify how many time error can exist before trigger "circuit breaker"
        "DurationOfBreak": 1000, // when circuit breaker is triggered, services will stop accept request in this time
        "TimeoutValue": 5000 // max milisecond can be execute in each request
      },
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "Bearer",
        "AllowedScopes": []
      },
      "SwaggerKey": "product-service"
    },
    {
      "DownstreamPathTemplate": "/api/product/{id}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6002
        }
      ],
      "UpstreamPathTemplate": "/product/{id}",
      "UpstreamHttpMethod": [ "GET" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "Bearer",
        "AllowedScopes": []
      },
      "SwaggerKey": "product-service"
    },
    {
      "DownstreamPathTemplate": "/api/product/{id}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6002
        }
      ],
      "UpstreamPathTemplate": "/product/{id}",
      "UpstreamHttpMethod": [ "PUT", "DELETE" ],
      "RouteClaimsRequirement": {
        "Role": "Admin"
      },
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "Bearer",
        "AllowedScopes": []
      },
      "SwaggerKey": "product-service"
    },
    {
      "DownstreamPathTemplate": "/api/product/get-product-by-no/{productNo}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6002
        }
      ],
      "UpstreamPathTemplate": "/product/by-no/{productNo}",
      "UpstreamHttpMethod": [ "GET" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "Bearer",
        "AllowedScopes": []
      },
      "SwaggerKey": "product-service"
    },

    // BASKET.API ROUTING
    {
      "DownstreamPathTemplate": "/api/basket/{userName}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6004
        }
      ],
      "UpstreamPathTemplate": "/basket/{userName}",
      "UpstreamHttpMethod": [ "GET", "DELETE" ]
    },
    {
      "DownstreamPathTemplate": "/api/basket/{userName}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6004
        }
      ],
      "UpstreamPathTemplate": "/basket/{userName}",
      "UpstreamHttpMethod": [ "POST" ]
    },
    {
      "DownstreamPathTemplate": "/api/basket/checkout/{userName}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6004
        }
      ],
      "UpstreamPathTemplate": "/basket/checkout/{userName}",
      "UpstreamHttpMethod": [ "POST" ]
    },

    // ODERS
    {
      "DownstreamPathTemplate": "/api/{version}/order/{any}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6005
        }
      ],
      "UpstreamPathTemplate": "/{version}/order/{any}",
      "UpstreamHttpMethod": [ "GET", "PUT", "DELETE" ]
    },
    {
      "DownstreamPathTemplate": "/api/{version}/order",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6005
        }
      ],
      "UpstreamPathTemplate": "/{version}/order",
      "UpstreamHttpMethod": [ "POST" ]
    },

    // INVENTORY
    {
      "DownstreamPathTemplate": "/api/inventory/items/{any}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6006
        }
      ],
      "UpstreamPathTemplate": "/inventory/items/{any}",
      "UpstreamHttpMethod": [ "GET" ]
    },
    {
      "DownstreamPathTemplate": "/api/inventory/items/{any}/paging",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6006
        }
      ],
      "UpstreamPathTemplate": "/inventory/items/{any}/paging",
      "UpstreamHttpMethod": [ "GET" ]
    },
    {
      "DownstreamPathTemplate": "/api/inventory/{any}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6006
        }
      ],
      "UpstreamPathTemplate": "/inventory/{any}",
      "UpstreamHttpMethod": [ "GET", "DELETE" ]
    },
    {
      "DownstreamPathTemplate": "/api/inventory/purchase/{any}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "host.docker.internal",
          "Port": 6006
        }
      ],
      "UpstreamPathTemplate": "/inventory/purchase/{any}",
      "UpstreamHttpMethod": [ "DELETE" ]
    }
  ]
}
